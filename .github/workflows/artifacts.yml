on:
  push:
    branches:
      - master
    # Sequence of patterns matched against refs/tags
  release:
    types: [ published ]

name: Build artifacts

jobs:
  build:
    if: ${{ github.event_name == 'release' }}
    name: Upload nginx configuration artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Generate artifacts
        run: |
          bash generate_artifact.sh
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Archive Node Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./radixdlt-nginx-archive-conf.zip
          asset_name: radixdlt-nginx-archive-conf.zip
          asset_content_type: application/zip
      - name: Upload Full Node Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./radixdlt-nginx-fullnode-conf.zip
          asset_name: radixdlt-nginx-fullnode-conf.zip
          asset_content_type: application/zip
  docker:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    environment: publish-dockerhub
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set Environment Variables
        run: |
          GH_EVENT_NAME="${{ github.event_name }}"
          if [[ ! -z $GH_EVENT_NAME ]] && [[ "$GH_EVENT_NAME" == "release" ]];then
            echo "Workflow triggered by a release event"
            NGINX_IMG_VERSION="${{ github.event.release.tag_name }}"
          else
            echo "Merge to master"
            NGINX_IMG_VERSION="development-latest"
          fi
          echo "Image tag: $NGINX_IMG_VERSION"
          echo "NGINX_IMG_VERSION=$NGINX_IMG_VERSION" >> $GITHUB_ENV
      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile.alpine
          push: true
          tags: |
            radixdlt/radixdlt-nginx:${{ env.NGINX_IMG_VERSION }}
